name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install fastapi uvicorn python-multipart httpx pytest pytest-cov
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff app
    
    - name: Check import sorting with isort  
      run: |
        isort --check-only --diff app
    
    - name: Type check with mypy
      run: |
        mypy app --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # mypy is informational for now

  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-multipart httpx pytest pytest-cov
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy pydantic
    
    - name: Download ephemeris data
      run: |
        # Create ephemeris directory and download basic files
        mkdir -p ephemeris
        # For testing, we'll use the files that come with pyswisseph
        python -c "
import swisseph as swe
print('Swiss Ephemeris data path:', swe.get_library_path())
"
    
    - name: Run tests with coverage
      run: |
        PYTHONPATH=. pytest --cov=app --cov-report=xml --cov-report=term-missing --tb=short
      env:
        EPHEMERIS_PATH: /usr/lib/python*/site-packages/swisseph/sweph
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-multipart httpx pytest pytest-cov
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy pydantic
    
    - name: Run tests
      run: |
        $env:PYTHONPATH = "."
        pytest --cov=app --cov-report=term-missing --tb=short
      env:
        EPHEMERIS_PATH: ${{ github.workspace }}\ephemeris

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-multipart httpx pytest pytest-benchmark
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy pydantic
    
    - name: Run performance tests
      run: |
        PYTHONPATH=. pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        auto-push: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    services:
      # Add any required services here (e.g., Redis, PostgreSQL)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-multipart httpx pytest pytest-cov
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy pydantic
    
    - name: Start API server
      run: |
        PYTHONPATH=. uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5  # Wait for server to start
    
    - name: Run integration tests
      run: |
        PYTHONPATH=. pytest tests/api/ tests/test_edge_cases.py -v
    
    - name: Test API endpoints
      run: |
        # Basic API health check
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        
        # Test natal chart endpoint
        curl -X POST "http://localhost:8000/ephemeris/natal" \
          -H "Content-Type: application/json" \
          -d '{
            "subject": {
              "name": "CI Test",
              "datetime": {"iso_string": "2000-01-01T12:00:00"},
              "latitude": {"decimal": 0.0},
              "longitude": {"decimal": 0.0},
              "timezone": {"name": "UTC"}
            }
          }' || exit 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        pip freeze | safety check --stdin
      continue-on-error: true
    
    - name: Run Bandit security scan
      run: |
        bandit -r app -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json
      if: always()

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-linux]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-multipart httpx pytest pytest-cov
        pip install pyswisseph python-dateutil timezonefinder tzdata numpy pydantic
    
    - name: Generate coverage report
      run: |
        PYTHONPATH=. pytest --cov=app --cov-report=html --cov-report=json --cov-report=term
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html
        path: htmlcov/
    
    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'pull_request'